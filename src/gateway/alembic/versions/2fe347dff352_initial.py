"""initial

Revision ID: 2fe347dff352
Revises: 
Create Date: 2022-03-04 17:11:53.068287

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '2fe347dff352'
down_revision = None
branch_labels = None
depends_on = None


def has_existing_database_schema():
    con = op.get_bind()
    # migratehistory is a table from the previous peewee migrate framework
    return sa.inspect(con.engine).has_table('migratehistory')


def upgrade():
    if has_existing_database_schema():
        upgrade_existing()
    else:
        upgrade_initial()


def downgrade():
    if has_existing_database_schema():
        downgrade_existing()
    else:
        downgrade_initial()


def upgrade_initial():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('apartment',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('mailbox_rebus_id', sa.Integer(), nullable=True),
    sa.Column('doorbell_rebus_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_apartment')),
    sa.UniqueConstraint('doorbell_rebus_id', name=op.f('uq_apartment_doorbell_rebus_id')),
    sa.UniqueConstraint('mailbox_rebus_id', name=op.f('uq_apartment_mailbox_rebus_id')),
    sqlite_autoincrement=True
    )
    op.create_table('config',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('setting', sa.String(length=255), nullable=False),
    sa.Column('data', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_config')),
    sa.UniqueConstraint('setting', name=op.f('uq_config_setting')),
    sqlite_autoincrement=True
    )
    op.create_table('feature',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_feature')),
    sa.UniqueConstraint('name', name=op.f('uq_feature_name')),
    sqlite_autoincrement=True
    )
    op.create_table('groupaction',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_groupaction')),
    sa.UniqueConstraint('number', name=op.f('uq_groupaction_number')),
    sqlite_autoincrement=True
    )
    op.create_table('module',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('source', sa.String(length=255), nullable=False),
    sa.Column('address', sa.String(length=255), nullable=False),
    sa.Column('module_type', sa.String(length=255), nullable=True),
    sa.Column('hardware_type', sa.String(length=255), nullable=False),
    sa.Column('firmware_version', sa.String(length=255), nullable=True),
    sa.Column('hardware_version', sa.String(length=255), nullable=True),
    sa.Column('order', sa.Integer(), nullable=True),
    sa.Column('last_online_update', sa.Integer(), nullable=True),
    sa.Column('update_success', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_module')),
    sqlite_autoincrement=True
    )
    op.create_table('plugin',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('version', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plugin')),
    sa.UniqueConstraint('name', name=op.f('uq_plugin_name')),
    sqlite_autoincrement=True
    )
    op.create_table('room',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_room')),
    sa.UniqueConstraint('number', name=op.f('uq_room_number')),
    sqlite_autoincrement=True
    )
    op.create_table('schedule',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('source', sa.String(length=255), nullable=False),
    sa.Column('external_id', sa.String(length=255), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('start', sa.Float(), nullable=False),
    sa.Column('repeat', sa.String(length=255), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('end', sa.Float(), nullable=True),
    sa.Column('action', sa.String(length=255), nullable=False),
    sa.Column('arguments', sa.String(length=255), nullable=True),
    sa.Column('status', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_schedule')),
    sa.UniqueConstraint('source', 'external_id', name=op.f('uq_schedule_source')),
    sqlite_autoincrement=True
    )
    op.create_table('energymodule',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('module_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], name=op.f('fk_energymodule_module_id_module'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_energymodule')),
    sa.UniqueConstraint('module_id', name=op.f('uq_energymodule_module_id')),
    sa.UniqueConstraint('number', name=op.f('uq_energymodule_number')),
    sqlite_autoincrement=True
    )
    op.create_table('input',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('event_enabled', sa.Boolean(), nullable=False),
    sa.Column('room_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['room_id'], ['room.id'], name=op.f('fk_input_room_id_room'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_input')),
    sa.UniqueConstraint('number', name=op.f('uq_input_number')),
    sqlite_autoincrement=True
    )
    op.create_table('output',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('room_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['room_id'], ['room.id'], name=op.f('fk_output_room_id_room'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_output')),
    sa.UniqueConstraint('number', name=op.f('uq_output_number')),
    sqlite_autoincrement=True
    )
    op.create_table('pulsecounter',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('source', sa.String(length=255), nullable=False),
    sa.Column('persistent', sa.Boolean(), nullable=False),
    sa.Column('room_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['room_id'], ['room.id'], name=op.f('fk_pulsecounter_room_id_room'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_pulsecounter')),
    sa.UniqueConstraint('number', name=op.f('uq_pulsecounter_number')),
    sqlite_autoincrement=True
    )
    op.create_table('sensor',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('source', sa.String(length=255), nullable=False),
    sa.Column('external_id', sa.String(length=255), nullable=False),
    sa.Column('physical_quantity', sa.String(length=255), nullable=True),
    sa.Column('unit', sa.String(length=255), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('room_id', sa.Integer(), nullable=True),
    sa.Column('plugin_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['plugin_id'], ['plugin.id'], name=op.f('fk_sensor_plugin_id_plugin'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['room_id'], ['room.id'], name=op.f('fk_sensor_room_id_room'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_sensor')),
    sa.UniqueConstraint('source', 'plugin_id', 'external_id', 'physical_quantity', name=op.f('uq_sensor_source')),
    sqlite_autoincrement=True
    )
    op.create_table('shutter',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('room_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['room_id'], ['room.id'], name=op.f('fk_shutter_room_id_room'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_shutter')),
    sa.UniqueConstraint('number', name=op.f('uq_shutter_number')),
    sqlite_autoincrement=True
    )
    op.create_table('shuttergroup',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('room_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['room_id'], ['room.id'], name=op.f('fk_shuttergroup_room_id_room'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_shuttergroup')),
    sa.UniqueConstraint('number', name=op.f('uq_shuttergroup_number')),
    sqlite_autoincrement=True
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=255), nullable=True),
    sa.Column('last_name', sa.String(length=255), nullable=True),
    sa.Column('role', sa.String(length=255), nullable=False),
    sa.Column('pin_code', sa.String(length=255), nullable=True),
    sa.Column('language', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('apartment_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('accepted_terms', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['apartment_id'], ['apartment.id'], name=op.f('fk_user_apartment_id_apartment'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user')),
    sa.UniqueConstraint('pin_code', name=op.f('uq_user_pin_code')),
    sa.UniqueConstraint('username', name=op.f('uq_user_username')),
    sqlite_autoincrement=True
    )
    op.create_table('ventilation',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('source', sa.String(length=255), nullable=False),
    sa.Column('plugin_id', sa.Integer(), nullable=True),
    sa.Column('external_id', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('amount_of_levels', sa.Integer(), nullable=False),
    sa.Column('device_vendor', sa.String(length=255), nullable=False),
    sa.Column('device_type', sa.String(length=255), nullable=False),
    sa.Column('device_serial', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['plugin_id'], ['plugin.id'], name=op.f('fk_ventilation_plugin_id_plugin'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ventilation')),
    sa.UniqueConstraint('source', 'plugin_id', 'external_id', name=op.f('uq_ventilation_source')),
    sqlite_autoincrement=True
    )
    op.create_table('delivery',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('type', sa.String(length=255), nullable=False),
    sa.Column('timestamp_delivery', sa.String(length=255), nullable=False),
    sa.Column('timestamp_pickup', sa.String(length=255), nullable=True),
    sa.Column('courier_firm', sa.String(length=255), nullable=True),
    sa.Column('signature_delivery', sa.String(length=255), nullable=True),
    sa.Column('signature_pickup', sa.String(length=255), nullable=True),
    sa.Column('parcelbox_rebus_id', sa.Integer(), nullable=False),
    sa.Column('user_delivery_id', sa.Integer(), nullable=True),
    sa.Column('user_pickup_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_delivery_id'], ['user.id'], name=op.f('fk_delivery_user_delivery_id_user')),
    sa.ForeignKeyConstraint(['user_pickup_id'], ['user.id'], name=op.f('fk_delivery_user_pickup_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_delivery')),
    sqlite_autoincrement=True
    )
    op.create_table('energyct',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('sensor_type', sa.Integer(), nullable=False),
    sa.Column('times', sa.String(length=255), nullable=False),
    sa.Column('inverted', sa.Boolean(), nullable=False),
    sa.Column('energy_module_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['energy_module_id'], ['energymodule.id'], name=op.f('fk_energyct_energy_module_id_energymodule'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_energyct')),
    sa.UniqueConstraint('number', 'energy_module_id', name=op.f('uq_energyct_number')),
    sqlite_autoincrement=True
    )
    op.create_table('pump',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('output_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['output_id'], ['output.id'], name=op.f('fk_pump_output_id_output'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_pump')),
    sa.UniqueConstraint('output_id', name=op.f('uq_pump_output_id')),
    sqlite_autoincrement=True
    )
    op.create_table('rfid',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('tag_string', sa.String(length=255), nullable=False),
    sa.Column('uid_manufacturer', sa.String(length=255), nullable=False),
    sa.Column('uid_extension', sa.String(length=255), nullable=True),
    sa.Column('enter_count', sa.Integer(), nullable=False),
    sa.Column('blacklisted', sa.Boolean(), nullable=False),
    sa.Column('label', sa.String(length=255), nullable=False),
    sa.Column('timestamp_created', sa.String(length=255), nullable=False),
    sa.Column('timestamp_last_used', sa.String(length=255), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_rfid_user_id_user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_rfid')),
    sa.UniqueConstraint('tag_string', name=op.f('uq_rfid_tag_string')),
    sa.UniqueConstraint('uid_manufacturer', name=op.f('uq_rfid_uid_manufacturer')),
    sqlite_autoincrement=True
    )
    op.create_table('thermostatgroup',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('threshold_temperature', sa.Float(), nullable=True),
    sa.Column('sensor_id', sa.Integer(), nullable=True),
    sa.Column('mode', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['sensor_id'], ['sensor.id'], name=op.f('fk_thermostatgroup_sensor_id_sensor'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_thermostatgroup')),
    sa.UniqueConstraint('number', name=op.f('uq_thermostatgroup_number')),
    sqlite_autoincrement=True
    )
    op.create_table('valve',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('delay', sa.Integer(), nullable=False),
    sa.Column('output_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['output_id'], ['output.id'], name=op.f('fk_valve_output_id_output'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_valve')),
    sa.UniqueConstraint('output_id', name=op.f('uq_valve_output_id')),
    sqlite_autoincrement=True
    )
    op.create_table('outputtothermostatgroup',
    sa.Column('output_id', sa.Integer(), nullable=False),
    sa.Column('thermostat_group_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('index', sa.Integer(), nullable=False),
    sa.Column('mode', sa.String(length=255), nullable=False),
    sa.Column('value', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['output_id'], ['output.id'], name=op.f('fk_outputtothermostatgroup_output_id_output'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['thermostat_group_id'], ['thermostatgroup.id'], name=op.f('fk_outputtothermostatgroup_thermostat_group_id_thermostatgroup'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('output_id', 'thermostat_group_id', name=op.f('pk_outputtothermostatgroup')),
    sqlite_autoincrement=True
    )
    op.create_table('pumptovalve',
    sa.Column('pump_id', sa.Integer(), nullable=False),
    sa.Column('valve_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['pump_id'], ['pump.id'], name=op.f('fk_pumptovalve_pump_id_pump'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['valve_id'], ['valve.id'], name=op.f('fk_pumptovalve_valve_id_valve'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('pump_id', 'valve_id', name=op.f('pk_pumptovalve')),
    sqlite_autoincrement=True
    )
    op.create_table('thermostat',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('state', sa.String(length=255), nullable=False),
    sa.Column('sensor_id', sa.Integer(), nullable=True),
    sa.Column('pid_heating_p', sa.Float(), nullable=False),
    sa.Column('pid_heating_i', sa.Float(), nullable=False),
    sa.Column('pid_heating_d', sa.Float(), nullable=False),
    sa.Column('pid_cooling_p', sa.Float(), nullable=False),
    sa.Column('pid_cooling_i', sa.Float(), nullable=False),
    sa.Column('pid_cooling_d', sa.Float(), nullable=False),
    sa.Column('automatic', sa.Boolean(), nullable=False),
    sa.Column('room_id', sa.Integer(), nullable=True),
    sa.Column('start', sa.Integer(), nullable=False),
    sa.Column('valve_config', sa.String(length=255), nullable=False),
    sa.Column('thermostat_group_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['room_id'], ['room.id'], name=op.f('fk_thermostat_room_id_room'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['sensor_id'], ['sensor.id'], name=op.f('fk_thermostat_sensor_id_sensor'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['thermostat_group_id'], ['thermostatgroup.id'], name=op.f('fk_thermostat_thermostat_group_id_thermostatgroup'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_thermostat')),
    sa.UniqueConstraint('number', name=op.f('uq_thermostat_number')),
    sqlite_autoincrement=True
    )
    op.create_table('dayschedule',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('index', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('mode', sa.String(length=255), nullable=False),
    sa.Column('thermostat_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['thermostat_id'], ['thermostat.id'], name=op.f('fk_dayschedule_thermostat_id_thermostat'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_dayschedule')),
    sqlite_autoincrement=True
    )
    op.create_table('preset',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('type', sa.String(length=255), nullable=False),
    sa.Column('heating_setpoint', sa.Float(), nullable=False),
    sa.Column('cooling_setpoint', sa.Float(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('thermostat_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['thermostat_id'], ['thermostat.id'], name=op.f('fk_preset_thermostat_id_thermostat'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_preset')),
    sqlite_autoincrement=True
    )
    op.create_table('valvetothermostat',
    sa.Column('thermostat_id', sa.Integer(), nullable=False),
    sa.Column('valve_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('mode', sa.String(length=255), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['thermostat_id'], ['thermostat.id'], name=op.f('fk_valvetothermostat_thermostat_id_thermostat'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['valve_id'], ['valve.id'], name=op.f('fk_valvetothermostat_valve_id_valve'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('thermostat_id', 'valve_id', name=op.f('pk_valvetothermostat')),
    sqlite_autoincrement=True
    )
    op.create_table('datamigration',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('migrated', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_datamigration')),
    sqlite_autoincrement=True
    )
    # ### end Alembic commands ###


def downgrade_initial():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('valvetothermostat')
    op.drop_table('preset')
    op.drop_table('dayschedule')
    op.drop_table('thermostat')
    op.drop_table('pumptovalve')
    op.drop_table('outputtothermostatgroup')
    op.drop_table('valve')
    op.drop_table('thermostatgroup')
    op.drop_table('rfid')
    op.drop_table('pump')
    op.drop_table('energyct')
    op.drop_table('delivery')
    op.drop_table('ventilation')
    op.drop_table('user')
    op.drop_table('shuttergroup')
    op.drop_table('shutter')
    op.drop_table('sensor')
    op.drop_table('pulsecounter')
    op.drop_table('output')
    op.drop_table('input')
    op.drop_table('energymodule')
    op.drop_table('schedule')
    op.drop_table('room')
    op.drop_table('plugin')
    op.drop_table('module')
    op.drop_table('groupaction')
    op.drop_table('feature')
    op.drop_table('config')
    op.drop_table('apartment')
    op.drop_table('datamigration')
    # ### end Alembic commands ###


naming_convention = {
  "ix": "ix_%(column_0_label)s",
  "uq": "uq_%(table_name)s_%(column_0_name)s",
  "ck": "ck_%(table_name)s_%(constraint_name)s",
  "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
  "pk": "pk_%(table_name)s"
}


def upgrade_existing():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('migratehistory')
    with op.batch_alter_table('apartment', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('apartment_doorbell_rebus_id')
        batch_op.drop_index('apartment_mailbox_rebus_id')
        batch_op.create_unique_constraint(batch_op.f('uq_apartment_doorbell_rebus_id'), ['doorbell_rebus_id'])
        batch_op.create_unique_constraint(batch_op.f('uq_apartment_mailbox_rebus_id'), ['mailbox_rebus_id'])

    with op.batch_alter_table('config', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('config_setting')
        batch_op.create_unique_constraint(batch_op.f('uq_config_setting'), ['setting'])

    with op.batch_alter_table('dayschedule', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('dayschedule_thermostat_id')

    with op.batch_alter_table('delivery', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('delivery_user_delivery_tmp_id')
        batch_op.drop_index('delivery_user_pickup_tmp_id')

    with op.batch_alter_table('energyct', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('energyct_energy_module_id')
        batch_op.drop_index('energyct_number_energy_module_id')
        batch_op.create_unique_constraint(batch_op.f('uq_energyct_number'), ['number', 'energy_module_id'])

    with op.batch_alter_table('energymodule', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('energymodule_module_id')
        batch_op.drop_index('energymodule_number')
        batch_op.create_unique_constraint(batch_op.f('uq_energymodule_module_id'), ['module_id'])
        batch_op.create_unique_constraint(batch_op.f('uq_energymodule_number'), ['number'])

    with op.batch_alter_table('feature', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('feature_name')
        batch_op.create_unique_constraint(batch_op.f('uq_feature_name'), ['name'])

    with op.batch_alter_table('groupaction', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('groupaction_number')
        batch_op.create_unique_constraint(batch_op.f('uq_groupaction_number'), ['number'])

    with op.batch_alter_table('input', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('input_number')
        batch_op.drop_index('input_room_id')
        batch_op.create_unique_constraint(batch_op.f('uq_input_number'), ['number'])

    with op.batch_alter_table('output', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('output_number')
        batch_op.drop_index('output_room_id')
        batch_op.create_unique_constraint(batch_op.f('uq_output_number'), ['number'])
        batch_op.drop_constraint('fk_output_room_id_room', type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('fk_output_room_id_room'), 'room', ['room_id'], ['id'], ondelete='SET NULL')

    with op.batch_alter_table('outputtothermostatgroup', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('outputtothermostatgroup_output_id')
        batch_op.drop_index('outputtothermostatgroup_output_id_thermostat_group_id_mode')
        batch_op.drop_index('outputtothermostatgroup_thermostat_group_id')

    with op.batch_alter_table('plugin', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('plugin_name')
        batch_op.create_unique_constraint(batch_op.f('uq_plugin_name'), ['name'])

    with op.batch_alter_table('preset', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('preset_thermostat_id')

    with op.batch_alter_table('pulsecounter', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('pulsecounter_number')
        batch_op.drop_index('pulsecounter_room_id')
        batch_op.create_unique_constraint(batch_op.f('uq_pulsecounter_number'), ['number'])

    with op.batch_alter_table('pump', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('pump_output_id')
        batch_op.create_unique_constraint(batch_op.f('uq_pump_output_id'), ['output_id'])

    with op.batch_alter_table('pumptovalve', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('pumptovalve_pump_id')
        batch_op.drop_index('pumptovalve_pump_id_valve_id')
        batch_op.drop_index('pumptovalve_valve_id')

    with op.batch_alter_table('rfid', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('rfid_tag_string')
        batch_op.drop_index('rfid_uid_manufacturer')
        batch_op.drop_index('rfid_user_id')
        batch_op.create_unique_constraint(batch_op.f('uq_rfid_tag_string'), ['tag_string'])
        batch_op.create_unique_constraint(batch_op.f('uq_rfid_uid_manufacturer'), ['uid_manufacturer'])

    with op.batch_alter_table('room', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('room_number')
        batch_op.create_unique_constraint(batch_op.f('uq_room_number'), ['number'])

    with op.batch_alter_table('schedule', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('schedule_source_external_id')
        batch_op.create_unique_constraint(batch_op.f('uq_schedule_source'), ['source', 'external_id'])

    with op.batch_alter_table('sensor', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('sensor_plugin_id')
        batch_op.drop_index('sensor_room_id')
        batch_op.drop_index('sensor_source_plugin_id_external_id_physical_quantity')
        batch_op.create_unique_constraint(batch_op.f('uq_sensor_source'), ['source', 'plugin_id', 'external_id', 'physical_quantity'])
        batch_op.drop_constraint('fk_sensor_plugin_id_plugin', type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('fk_sensor_plugin_id_plugin'), 'plugin', ['plugin_id'], ['id'], ondelete='CASCADE')

    with op.batch_alter_table('shutter', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('shutter_number')
        batch_op.drop_index('shutter_room_id')
        batch_op.create_unique_constraint(batch_op.f('uq_shutter_number'), ['number'])

    with op.batch_alter_table('shuttergroup', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('shuttergroup_number')
        batch_op.drop_index('shuttergroup_room_id')
        batch_op.create_unique_constraint(batch_op.f('uq_shuttergroup_number'), ['number'])

    with op.batch_alter_table('thermostat', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('thermostat_number')
        batch_op.drop_index('thermostat_room_id')
        batch_op.drop_index('thermostat_sensor_id')
        batch_op.drop_index('thermostat_thermostat_group_id')
        batch_op.create_unique_constraint(batch_op.f('uq_thermostat_number'), ['number'])

    with op.batch_alter_table('thermostatgroup', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('thermostatgroup_number')
        batch_op.drop_index('thermostatgroup_sensor_id')
        batch_op.create_unique_constraint(batch_op.f('uq_thermostatgroup_number'), ['number'])

    with op.batch_alter_table('user', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('user_apartment_id')
        batch_op.drop_index('user_pin_code')
        batch_op.create_unique_constraint(batch_op.f('uq_user_pin_code'), ['pin_code'])
        batch_op.create_unique_constraint(batch_op.f('uq_user_username'), ['username'])

    with op.batch_alter_table('valve', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('valve_output_id')
        batch_op.create_unique_constraint(batch_op.f('uq_valve_output_id'), ['output_id'])

    with op.batch_alter_table('valvetothermostat', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('valvetothermostat_thermostat_id')
        batch_op.drop_index('valvetothermostat_valve_id')
        batch_op.drop_index('valvetothermostat_valve_id_thermostat_id_mode')

    with op.batch_alter_table('ventilation', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_index('ventilation_plugin_id')
        batch_op.drop_index('ventilation_source_plugin_id_external_id')
        batch_op.create_unique_constraint(batch_op.f('uq_ventilation_source'), ['source', 'plugin_id', 'external_id'])

    # ### end Alembic commands ###


def downgrade_existing():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('ventilation', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_ventilation_source'), type_='unique')
        batch_op.create_index('ventilation_source_plugin_id_external_id', ['source', 'plugin_id', 'external_id'], unique=False)
        batch_op.create_index('ventilation_plugin_id', ['plugin_id'], unique=False)

    with op.batch_alter_table('valvetothermostat', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.create_index('valvetothermostat_valve_id_thermostat_id_mode', ['valve_id', 'thermostat_id', 'mode'], unique=False)
        batch_op.create_index('valvetothermostat_valve_id', ['valve_id'], unique=False)
        batch_op.create_index('valvetothermostat_thermostat_id', ['thermostat_id'], unique=False)

    with op.batch_alter_table('valve', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_valve_output_id'), type_='unique')
        batch_op.create_index('valve_output_id', ['output_id'], unique=False)

    with op.batch_alter_table('user', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_user_username'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_user_pin_code'), type_='unique')
        batch_op.create_index('user_pin_code', ['pin_code'], unique=False)
        batch_op.create_index('user_apartment_id', ['apartment_id'], unique=False)

    with op.batch_alter_table('thermostatgroup', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_thermostatgroup_number'), type_='unique')
        batch_op.create_index('thermostatgroup_sensor_id', ['sensor_id'], unique=False)
        batch_op.create_index('thermostatgroup_number', ['number'], unique=False)

    with op.batch_alter_table('thermostat', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_thermostat_number'), type_='unique')
        batch_op.create_index('thermostat_thermostat_group_id', ['thermostat_group_id'], unique=False)
        batch_op.create_index('thermostat_sensor_id', ['sensor_id'], unique=False)
        batch_op.create_index('thermostat_room_id', ['room_id'], unique=False)
        batch_op.create_index('thermostat_number', ['number'], unique=False)

    with op.batch_alter_table('shuttergroup', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_shuttergroup_number'), type_='unique')
        batch_op.create_index('shuttergroup_room_id', ['room_id'], unique=False)
        batch_op.create_index('shuttergroup_number', ['number'], unique=False)

    with op.batch_alter_table('shutter', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_shutter_number'), type_='unique')
        batch_op.create_index('shutter_room_id', ['room_id'], unique=False)
        batch_op.create_index('shutter_number', ['number'], unique=False)

    with op.batch_alter_table('sensor', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_sensor_plugin_id_plugin'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'plugin', ['plugin_id'], ['id'])
        batch_op.drop_constraint(batch_op.f('uq_sensor_source'), type_='unique')
        batch_op.create_index('sensor_source_plugin_id_external_id_physical_quantity', ['source', 'plugin_id', 'external_id', 'physical_quantity'], unique=False)
        batch_op.create_index('sensor_room_id', ['room_id'], unique=False)
        batch_op.create_index('sensor_plugin_id', ['plugin_id'], unique=False)

    with op.batch_alter_table('schedule', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_schedule_source'), type_='unique')
        batch_op.create_index('schedule_source_external_id', ['source', 'external_id'], unique=False)

    with op.batch_alter_table('room', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_room_number'), type_='unique')
        batch_op.create_index('room_number', ['number'], unique=False)

    with op.batch_alter_table('rfid', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_rfid_uid_manufacturer'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_rfid_tag_string'), type_='unique')
        batch_op.create_index('rfid_user_id', ['user_id'], unique=False)
        batch_op.create_index('rfid_uid_manufacturer', ['uid_manufacturer'], unique=False)
        batch_op.create_index('rfid_tag_string', ['tag_string'], unique=False)

    with op.batch_alter_table('pumptovalve', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.create_index('pumptovalve_valve_id', ['valve_id'], unique=False)
        batch_op.create_index('pumptovalve_pump_id_valve_id', ['pump_id', 'valve_id'], unique=False)
        batch_op.create_index('pumptovalve_pump_id', ['pump_id'], unique=False)

    with op.batch_alter_table('pump', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_pump_output_id'), type_='unique')
        batch_op.create_index('pump_output_id', ['output_id'], unique=False)

    with op.batch_alter_table('pulsecounter', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_pulsecounter_number'), type_='unique')
        batch_op.create_index('pulsecounter_room_id', ['room_id'], unique=False)
        batch_op.create_index('pulsecounter_number', ['number'], unique=False)

    with op.batch_alter_table('preset', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.create_index('preset_thermostat_id', ['thermostat_id'], unique=False)

    with op.batch_alter_table('plugin', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_plugin_name'), type_='unique')
        batch_op.create_index('plugin_name', ['name'], unique=False)

    with op.batch_alter_table('outputtothermostatgroup', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.create_index('outputtothermostatgroup_thermostat_group_id', ['thermostat_group_id'], unique=False)
        batch_op.create_index('outputtothermostatgroup_output_id_thermostat_group_id_mode', ['output_id', 'thermostat_group_id', 'mode'], unique=False)
        batch_op.create_index('outputtothermostatgroup_output_id', ['output_id'], unique=False)

    with op.batch_alter_table('output', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_output_room_id_room'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'room', ['room_id'], ['id'])
        batch_op.drop_constraint(batch_op.f('uq_output_number'), type_='unique')
        batch_op.create_index('output_room_id', ['room_id'], unique=False)
        batch_op.create_index('output_number', ['number'], unique=False)

    with op.batch_alter_table('input', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_input_number'), type_='unique')
        batch_op.create_index('input_room_id', ['room_id'], unique=False)
        batch_op.create_index('input_number', ['number'], unique=False)

    with op.batch_alter_table('groupaction', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_groupaction_number'), type_='unique')
        batch_op.create_index('groupaction_number', ['number'], unique=False)

    with op.batch_alter_table('feature', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_feature_name'), type_='unique')
        batch_op.create_index('feature_name', ['name'], unique=False)

    with op.batch_alter_table('energymodule', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_energymodule_number'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_energymodule_module_id'), type_='unique')
        batch_op.create_index('energymodule_number', ['number'], unique=False)
        batch_op.create_index('energymodule_module_id', ['module_id'], unique=False)

    with op.batch_alter_table('energyct', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_energyct_number'), type_='unique')
        batch_op.create_index('energyct_number_energy_module_id', ['number', 'energy_module_id'], unique=False)
        batch_op.create_index('energyct_energy_module_id', ['energy_module_id'], unique=False)

    with op.batch_alter_table('delivery', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.create_index('delivery_user_pickup_tmp_id', ['user_pickup_id'], unique=False)
        batch_op.create_index('delivery_user_delivery_tmp_id', ['user_delivery_id'], unique=False)

    with op.batch_alter_table('dayschedule', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.create_index('dayschedule_thermostat_id', ['thermostat_id'], unique=False)

    with op.batch_alter_table('config', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_config_setting'), type_='unique')
        batch_op.create_index('config_setting', ['setting'], unique=False)

    with op.batch_alter_table('apartment', schema=None, naming_convention=naming_convention, table_kwargs={'sqlite_autoincrement': True}) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_apartment_mailbox_rebus_id'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_apartment_doorbell_rebus_id'), type_='unique')
        batch_op.create_index('apartment_mailbox_rebus_id', ['mailbox_rebus_id'], unique=False)
        batch_op.create_index('apartment_doorbell_rebus_id', ['doorbell_rebus_id'], unique=False)

    op.create_table('migratehistory',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('migrated_at', sa.DATETIME(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
